@model FutureTechnologyE_Commerce.Models.ViewModels.HomeIndexViewModel

@{
    ViewData["Title"] = "Accessories";
}

<div class="container my-5">
    <div class="row g-4">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mb-4">
            <h1 class="display-6 fw-bold mb-3 mb-md-0">@ViewData["Title"]</h1>
            <form asp-action="GetAllAccessories" method="get" class="d-flex">
                <input type="text" name="searchString" value="@Model.SearchString"
                       class="form-control me-2" placeholder="Search products..." />
                <button type="submit" class="btn btn-outline-primary">Search</button>
            </form>
        </div>

        @foreach (var item in Model.Accessories)
        {
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card h-100 border-0 shadow rounded-3 overflow-hidden product-card">
                    <div class="card-img-wrapper">
                        <img src="@item.ImageUrl"
                             class="card-img-top"
                             alt="@item.Name"
                             onerror="this.src='/images/placeholder.svg'">
                        
                        <div class="product-overlay">
                            <a asp-controller="Home" asp-action="Details" asp-route-id="@item.ProductID" class="btn btn-light btn-sm">
                                View Details
                            </a>
                        </div>

                        <div class="badge-container">
                            <div class="left-badges">
                                @if (item.IsBestseller)
                                {
                                    <span class="badge bg-warning">Bestseller</span>
                                }
                                <span class="badge bg-primary">@item.Category.Name</span>
                            </div>
                            <div class="right-badges">
                                <span class="badge bg-secondary">@item.Brand.Name</span>
                                @if (item.StockQuantity > 0)
                                {
                                    <span class="badge bg-success">In Stock</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Sold Out</span>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title fw-bold text-truncate-2">@item.Name</h5>

                        <div class="d-flex justify-content-between align-items-center mt-auto">
                            <div>
                                <span class="h5 text-primary fw-bold">EGP @item.Price.ToString("0.00")</span>
                            </div>

                            <form asp-controller="Cart" asp-action="AddToCart" method="post" class="addToCartForm">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="productId" value="@item.ProductID" />
                                <button type="submit" class="btn btn-primary btn-sm rounded-pill"
                                        @(item.StockQuantity == 0 ? "disabled" : "")>
                                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                                    Add to Cart <i class="bi bi-cart-plus ms-2"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (Model.TotalCount > 0)
        {
            <nav aria-label="Accessories pagination" class="mt-4">
                <div class="pagination d-flex justify-content-center flex-wrap gap-2">
                    @{
                        int totalPages = (int)Math.Ceiling((double)Model.TotalCount / Model.PageSize);
                        int startPage = Math.Max(1, Model.PageNumber - 2);
                        int endPage = Math.Min(totalPages, startPage + 4);
                        startPage = Math.Max(1, endPage - 4);
                    }

                    @if (Model.PageNumber > 1)
                    {
                        <a asp-action="GetAllAccessories" 
                           asp-route-pageNumber="@(Model.PageNumber - 1)" 
                           asp-route-searchString="@Model.SearchString"
                           class="btn btn-outline-primary">Previous</a>
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <a asp-action="GetAllAccessories" 
                           asp-route-pageNumber="@i" 
                           asp-route-searchString="@Model.SearchString"
                           class="btn btn-outline-primary @(i == Model.PageNumber ? "active" : "")">@i</a>
                    }

                    @if (Model.PageNumber < totalPages)
                    {
                        <a asp-action="GetAllAccessories" 
                           asp-route-pageNumber="@(Model.PageNumber + 1)" 
                           asp-route-searchString="@Model.SearchString"
                           class="btn btn-outline-primary">Next</a>
                    }
                </div>
            </nav>
        }
    </div>
</div>

<style>
    .card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.15);
    }

    .text-truncate-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .addToCartForm {
        transition: opacity 0.2s;
    }

    .addToCartForm.loading {
        opacity: 0.7;
        pointer-events: none;
    }

    .badge-container {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        z-index: 2;
        display: flex;
        justify-content: space-between;
        padding: 0.75rem;
        pointer-events: none;
    }

    .left-badges, .right-badges {
        display: flex;
        flex-direction: column;
        gap: 0.375rem;
        align-items: flex-start;
    }

    .right-badges {
        align-items: flex-end;
    }

    .badge {
        margin: 0;
        font-weight: 500;
        padding: 0.5em 1em;
        border-radius: 6px;
        backdrop-filter: blur(4px);
        position: relative;
        max-width: 100px;
        text-align: center;
        font-size: 0.75rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .badge.bg-warning {
        background-color: rgba(255, 193, 7, 0.9) !important;
        color: #212529;
    }

    .badge.bg-success {
        background-color: rgba(46, 204, 113, 0.9) !important;
    }

    .badge.bg-danger {
        background-color: rgba(231, 76, 60, 0.9) !important;
    }

    .badge.bg-primary {
        background-color: rgba(13, 110, 253, 0.9) !important;
    }

    .badge.bg-secondary {
        background-color: rgba(108, 117, 125, 0.9) !important;
    }

    .card-img-wrapper {
        position: relative;
        overflow: hidden;
    }

    .product-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(2px);
        overflow: hidden;
        height: 0;
        width: 100%;
        transition: .5s ease;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .card:hover .product-overlay {
        height: 100%;
    }

    @media (max-width: 768px) {
        .card-title {
            font-size: 1.1rem;
        }
    }
</style>

@section Scripts {
    <script>
        document.querySelectorAll('.addToCartForm').forEach(form => {
            form.addEventListener('submit', function () {
                const btn = this.querySelector('button');
                const spinner = btn.querySelector('.spinner-border');
                btn.classList.add('disabled');
                spinner.classList.remove('d-none');
                this.classList.add('loading');
            });
        });
    </script>
} 