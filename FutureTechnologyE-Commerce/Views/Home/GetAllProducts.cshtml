@model FutureTechnologyE_Commerce.Models.ViewModels.HomeIndexViewModel

@{
    ViewData["Title"] = string.IsNullOrEmpty(Model.Category) ? "All Products" : 
                        Model.Category.ToLower() == "mouse" ? "Mouse" :
                        Model.Category.ToLower() == "keyboard" ? "Keyboards" :
                        Model.Category.ToLower() == "mousepad" ? "Mousepads" :
                        Model.Category.ToLower() == "printer" ? "Printers" : 
                        $"{Model.Category} Products";
}

<div class="container my-5">
    <div class="row g-4">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mb-4">
            <h1 class="display-6 fw-bold mb-3 mb-md-0">@ViewData["Title"]</h1>
            <form asp-action="@(string.IsNullOrEmpty(Model.Category) ? "GetAllProducts" : "GetFilteredProducts")" method="get" class="d-flex">
                <input type="hidden" name="pageNumber" value="1" />
                @if (!string.IsNullOrEmpty(Model.Category))
                {
                    <input type="hidden" name="categoryFilter" value="@Model.Category" />
                }
                <input type="text" name="searchString" value="@Model.SearchString"
                       class="form-control me-2" placeholder="Search products..." />
                <button type="submit" class="btn btn-outline-primary">Search</button>
            </form>
        </div>

        <!-- Category Filters -->
        <div class="mb-4">
            <form asp-action="GetFilteredProducts" method="get" id="categoryFilterForm" class="d-flex align-items-center">
                <input type="hidden" name="pageNumber" value="1" />
                <input type="hidden" name="searchString" value="@Model.SearchString" />
                <label for="categoryFilter" class="me-2 fw-bold">Filter by Category:</label>
                <select name="categoryFilter" id="categoryFilter" class="form-select" style="max-width: 200px;" onchange="document.getElementById('categoryFilterForm').submit();">
                    <option value="">All Products</option>
                    @if (Model.CategoryOptions != null)
                    {
                        foreach (var category in Model.CategoryOptions)
                        {
                            string displayName = category == "Mouse" ? "Mouse" : $"{category}s";
                            if (Model.Category?.ToLower() == category.ToLower())
                            {
                                <option value="@category" selected>@displayName</option>
                            }
                            else
                            {
                                <option value="@category">@displayName</option>
                            }
                        }
                    }
                </select>
            </form>
        </div>

        @foreach (var item in Model.Products)
        {
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card h-100 border-0 shadow rounded-3 overflow-hidden product-card">
                    <div class="card-img-wrapper">
                        <img src="@item.ImageUrl"
                             class="card-img-top"
                             alt="@item.Name"
                             onerror="this.src='/images/placeholder.svg'">
                        
                        <div class="product-overlay">
                            @if (item.GetType().Name == "Laptop")
                            {
                                <a asp-controller="Laptops" asp-action="Details" asp-route-id="@item.ProductID" class="btn btn-light btn-sm">
                                    View Details
                                </a>
                            }
                            else
                            {
                                <a asp-controller="Home" asp-action="Details" asp-route-id="@item.ProductID" class="btn btn-light btn-sm">
                                    View Details
                                </a>
                            }
                        </div>

                        <div class="badge-container">
                            <div class="left-badges">
                                @if (item.IsBestseller)
                                {
                                    <span class="badge bg-warning">Bestseller</span>
                                }
                                <span class="badge bg-primary">@item.Category.Name</span>
                            </div>
                            <div class="right-badges">
                                <span class="badge bg-secondary">@item.Brand.Name</span>
                                @if (item.StockQuantity > 0)
                                {
                                    <span class="badge bg-success">In Stock</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Sold Out</span>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title fw-bold text-truncate-2">@item.Name</h5>

                        <div class="d-flex justify-content-between align-items-center mt-auto">
                            <div>
                                <span class="h5 text-primary fw-bold">EGP @item.Price.ToString("0.00")</span>
                            </div>

                            <form asp-controller="Cart" asp-action="AddToCart" method="post" class="addToCartForm">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="productId" value="@item.ProductID" />
                                <button type="submit" class="btn btn-primary btn-sm rounded-pill"
                                        @(item.StockQuantity == 0 ? "disabled" : "")>
                                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                                    Add to Cart <i class="bi bi-cart-plus ms-2"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }

        <nav aria-label="Page navigation" class="mt-4">
            <!-- Pagination Controls -->
            <div class="pagination mt-4 d-flex justify-content-center flex-wrap gap-2">
                @{
                    int totalPages = (int)Math.Ceiling((double)Model.TotalCount / Model.PageSize);
                    string currentAction = string.IsNullOrEmpty(Model.Category) ? "GetAllProducts" : "GetFilteredProducts";
                }
                @if (Model.PageNumber > 1)
                {
                    <a asp-action="@currentAction" 
                       asp-route-pageNumber="@(Model.PageNumber - 1)" 
                       asp-route-searchString="@Model.SearchString"
                       asp-route-categoryFilter="@Model.Category"
                       class="btn btn-outline-primary">Previous</a>
                }
                @for (int i = 1; i <= totalPages; i++)
                {
                    <a asp-action="@currentAction" 
                       asp-route-pageNumber="@i" 
                       asp-route-searchString="@Model.SearchString"
                       asp-route-categoryFilter="@Model.Category"
                       class="btn btn-outline-primary @(i == Model.PageNumber ? "active" : "")">@i</a>
                }
                @if (Model.PageNumber < totalPages)
                {
                    <a asp-action="@currentAction" 
                       asp-route-pageNumber="@(Model.PageNumber + 1)" 
                       asp-route-searchString="@Model.SearchString"
                       asp-route-categoryFilter="@Model.Category"
                       class="btn btn-outline-primary">Next</a>
                }
            </div>
        </nav>
    </div>
</div>

<style>
    .card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        height: 100%;
        display: flex;
        flex-direction: column;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }
        
    .product-card {
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .card-img-wrapper {
        position: relative;
        height: 240px;
        overflow: hidden;
    }
    
    .card-img-top {
        width: 100%;
        height: 100%;
        object-fit: contain;
    }

    .text-truncate-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        height: 48px; /* Fixed height for title (24px line-height × 2 lines) */
        margin-bottom: 10px;
    }

    .addToCartForm {
        transition: opacity 0.2s;
    }

        .addToCartForm.loading {
            opacity: 0.7;
            pointer-events: none;
        }

    .badge-container {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        z-index: 2;
        display: flex;
        justify-content: space-between;
        padding: 0.75rem;
        pointer-events: none;
    }
    
    .left-badges, .right-badges {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        align-items: flex-start;
    }

    .right-badges {
        align-items: flex-end;
    }

    .badge {
        font-weight: 600;
        font-size: 0.75rem;
        padding: 0.35em 0.85em;
        border-radius: 50rem;
        letter-spacing: 0.03em;
        text-transform: uppercase;
        white-space: nowrap;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        backdrop-filter: blur(5px);
        transition: all 0.3s ease;
        border: 1px solid rgba(255,255,255,0.2);
    }

    .card:hover .badge {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .badge.bg-warning {
        background: linear-gradient(135deg, rgba(255, 193, 7, 0.95), rgba(255, 159, 0, 0.95)) !important;
        color: #000;
    }

    .badge.bg-success {
        background: linear-gradient(135deg, rgba(46, 204, 113, 0.95), rgba(39, 174, 96, 0.95)) !important;
        color: white;
    }

    .badge.bg-danger {
        background: linear-gradient(135deg, rgba(231, 76, 60, 0.95), rgba(192, 57, 43, 0.95)) !important;
        color: white;
    }

    .badge.bg-primary {
        background: linear-gradient(135deg, rgba(52, 152, 219, 0.95), rgba(41, 128, 185, 0.95)) !important;
        color: white;
    }

    .badge.bg-secondary {
        background: linear-gradient(135deg, rgba(108, 117, 125, 0.95), rgba(73, 80, 87, 0.95)) !important;
        color: white;
    }
    
    .card-body {
        flex: 1;
        display: flex;
        flex-direction: column;
    }
    
    .mt-auto {
        margin-top: auto;
    }

    @@media (max-width: 768px) {
        .card-title {
            font-size: 1.1rem;
        }
    }
</style>

@section Scripts {
    <script>
        document.querySelectorAll('.addToCartForm').forEach(form => {
            form.addEventListener('submit', function () {
                const btn = this.querySelector('button');
                const spinner = btn.querySelector('.spinner-border');
                btn.classList.add('disabled');
                spinner.classList.remove('d-none');
                this.classList.add('loading');
            });
        });
    </script>
}